package main

// 65：不用加减乘除做加法
// 题目：写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷
// 四则运算符号。

// A：不能使用四则运算，只能使用位运算了
// 首先考虑不进位的，同为0的，结果仍然为0，同为1的，结果为1，相当于异或运算
// 再考虑进位，进位的只有两个都是1的位置，与运算，然后左移一位
// 直到进位为0

// 5为： 00101
// 17为：10001
// 异或之后为10100，与并左移之后为00010
// 相当于20+2=22

func addTwoNumber(a,b int) int {
	for {
		sum := a^b
		carry := (a&b) << 1
		if carry == 0 {
			return sum
		}
		// 相当于 sum + carry
		a = sum
		b = carry
	}
}

func main() {
	Test(1, 2, 3);
	Test(111, 899, 1010);

	Test(-1, 2, 1);
	Test(1, -2, -1);

	Test(3, 0, 3);
	Test(0, -4, -4);

	// -2的二进制表示
	// 2的原码为 0000 0010
	// 反码为    1111 1101
	// 补码为    1111 1110

	// -8
	// 0000 1000
	// 1111 0111
	// 1111 1000

	// 异或     0000 0110
	// 与并左移  1111 0000
	//          1111 0110

	// -10
	// 0000 1010
	// 1111 0101
	// 1111 0110
	Test(-2, -8, -10);
}

func Test(a,b,expected int) {
	if addTwoNumber(a,b) != expected {
		panic("fuck")
	}
}